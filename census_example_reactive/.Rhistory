showPoints = TRUE,
title = "Hey we made parallel plot and iris stuff whatev",
alphaLines = .3
) +
scale_color_viridis(discrete = TRUE) + theme_ipsum() + theme(plot.title = element_text(size = 10))
knitr::opts_chunk$set(echo = TRUE)
library(hrbrthemes)
library(GGally)
library(viridis)
data <- iris
summary(data)
ggparcoord(data,
columns = 1:4, groupColumn = 5, order = "anyClass",
showPoints = TRUE,
title = "Hey we made parallel plot and iris stuff whatev",
alphaLines = .3
) +
scale_color_viridis(discrete = TRUE) + theme_ipsum() + theme(plot.title = element_text(size = 10))
library(hrbrthemes)
library(GGally)
library(viridis)
data <- iris
summary(data)
ggparcoord(data,
columns = 1:4, groupColumn = 5, order = "anyClass",
showPoints = TRUE,
scale = "globalminmax",
title = "Hey we made parallel plot and iris stuff whatev",
alphaLines = .3
) +
scale_color_viridis(discrete = TRUE) + theme_ipsum() + theme(plot.title = element_text(size = 10))
library(hrbrthemes)
library(GGally)
library(viridis)
data <- iris
summary(data)
ggparcoord(data,
columns = 1:4, groupColumn = 5, order = "anyClass",
showPoints = TRUE,
#scale = "globalminmax",
title = "Hey we made parallel plot and iris stuff whatev",
alphaLines = .3
) +
scale_color_viridis(discrete = TRUE) + theme_ipsum() + theme(plot.title = element_text(size = 10))
library(hrbrthemes)
library(GGally)
library(viridis)
data <- iris
summary(data)
ggparcoord(data,
columns = 1:4, groupColumn = 5, order = "anyClass",
showPoints = TRUE,
scale = "globalminmax",
title = "Hey we made parallel plot and iris stuff whatev",
alphaLines = .3
) +
scale_color_viridis(discrete = TRUE) + theme_ipsum() + theme(plot.title = element_text(size = 10))
library(hrbrthemes)
library(GGally)
library(viridis)
data <- iris
summary(data)
ggparcoord(data,
columns = 1:4, groupColumn = 5, order = "anyClass",
showPoints = TRUE,
scale = "uniminmax",
title = "Hey we made parallel plot and iris stuff whatev",
alphaLines = .3
) +
scale_color_viridis(discrete = TRUE) + theme_ipsum() + theme(plot.title = element_text(size = 10))
library(hrbrthemes)
library(GGally)
library(viridis)
data <- iris
summary(data)
ggparcoord(data,
columns = 1:4, groupColumn = 5, order = "anyClass",
showPoints = TRUE,
scale = "center",
title = "Hey we made parallel plot and iris stuff whatev",
alphaLines = .3
) +
scale_color_viridis(discrete = TRUE) + theme_ipsum() + theme(plot.title = element_text(size = 10))
library(hrbrthemes)
library(GGally)
library(viridis)
data <- iris
summary(data)
ggparcoord(data,
columns = 1:4, groupColumn = 5, order = "anyClass",
showPoints = TRUE,
scale = "std",
title = "Hey we made parallel plot and iris stuff whatev",
alphaLines = .3
) +
scale_color_viridis(discrete = TRUE) + theme_ipsum() + theme(plot.title = element_text(size = 10))
library(hrbrthemes)
library(GGally)
library(viridis)
data <- iris
summary(data)
data %>% arrange(desc(Species)) %>%
ggparcoord(data,
columns = 1:4, groupColumn = 5, order = "anyClass",
showPoints = TRUE,
scale = "std",
title = "Hey we made parallel plot and iris stuff whatev",
alphaLines = .3
) +
scale_color_manual(values=c( "#69b3a2", "#E8E8E8", "#E8E8E8") ) theme(plot.title = element_text(size = 10))
library(hrbrthemes)
library(GGally)
library(viridis)
data <- iris
summary(data)
data %>% arrange(desc(Species)) %>%
ggparcoord(data,
columns = 1:4, groupColumn = 5, order = "anyClass",
showPoints = TRUE,
scale = "std",
title = "Hey we made parallel plot and iris stuff whatev",
alphaLines = .3
) +
scale_color_manual(values=c( "#69b3a2", "#E8E8E8", "#E8E8E8") ) + theme(plot.title = element_text(size = 10))
library(hrbrthemes)
library(GGally)
library(viridis)
library(dplyr)
data <- iris
summary(data)
data %>% arrange(desc(Species)) %>%
ggparcoord(data,
columns = 1:4, groupColumn = 5, order = "anyClass",
showPoints = TRUE,
scale = "std",
title = "Hey we made parallel plot and iris stuff whatev",
alphaLines = .3
) +
scale_color_manual(values=c( "#69b3a2", "#E8E8E8", "#E8E8E8") ) + theme(plot.title = element_text(size = 10))
devtools::install_github("hrbrmstr/streamgraph")
library(streamgraph)
install.packages(devtools)
install.packages("devtools")
install.packages("devtools")
knitr::opts_chunk$set(echo = TRUE)
summary(iris)
seq(1990, 2016)
rep(seq(1990, 2016), 10)
rep(letters[1:10 , 27])
rep(letters[1:10] , 27)
View(seq(0, 1, 0.0001))
sample(seq(0, 1, 0.0001), 270)
sample(seq(0, 1, 0.0001), 270)
sample(seq(0, 1, 0.0001), 270)
View(sample(seq(0, 1, 0.0001), 270))
randdata <- data.frame(
year = rep(seq(1990, 2016), each = 10),
name = rep(letters[1:10] , 27),
value = sample(seq(0, 1, 0.0001), 270)
)
View(randdata)
summary(iris)
library(streamgraph)
randdata <- data.frame(
year = rep(seq(1990, 2016), each = 10),
name = rep(letters[1:10] , 27),
value = sample(seq(0, 1, 0.0001), 270)
)
prettyPlot <- streamgraph(randdata, key ="name" value = "value", date = "year", height = "300px", width = "1000px") %>% sg_legend(show TRUE, label = "names : ")
summary(iris)
library(streamgraph)
randdata <- data.frame(
year = rep(seq(1990, 2016), each = 10),
name = rep(letters[1:10] , 27),
value = sample(seq(0, 1, 0.0001), 270)
)
prettyPlot <- streamgraph(randdata, key ="name", value = "value", date = "year", height = "300px", width = "1000px") %>% sg_legend(show TRUE, label = "names : ")
summary(iris)
library(streamgraph)
randdata <- data.frame(
year = rep(seq(1990, 2016), each = 10),
name = rep(letters[1:10] , 27),
value = sample(seq(0, 1, 0.0001), 270)
)
prettyPlot <- streamgraph(randdata, key ="name", value = "value", date = "year", height = "300px", width = "1000px") %>% sg_legend(show = TRUE, label = "names : ")
prettyplot
prettyPlot
save.image("C:/Users/Ariel/Desktop/oldREnv.RData")
View(van_Gogh_paintings)
View(van_Gogh_paintings)
eval("van_Gogh_paintings")
a = eval("van_Gogh_paintings")
a
a = eval(as.name("van_Gogh_paintings"))
a
a = as.name("van_Gogh_paintings")
a
a = eval(as.name("van_Gogh_paintings"))
shiny::runApp('C:/Users/Ariel/Downloads/Microbiome Explorer/MicrobiomeExplorer/MicrobiomeExplorer')
runApp('C:/Users/Ariel/Downloads/Microbiome Explorer/MicrobiomeExplorer/MicrobiomeExplorer')
colors1 <- randomColor(200, luminosity = "random")
library(randomcoloR)
install.packages("randomcoloR")
library(randomcoloR)
colors1 <- randomColor(200, luminosity = "random")
colors1
shiny::runApp('C:/Users/Ariel/Desktop/OrdinationApril2019')
clear
shiny::runApp('C:/Users/Ariel/Downloads/Microbiome Explorer/MicrobiomeExplorer/MicrobiomeExplorer')
runApp('C:/Users/Ariel/Desktop/OrdinationApril2019')
shiny::runApp('C:/Users/Ariel/Desktop/OrdinationApril2019')
runApp('C:/Users/Ariel/Downloads/Microbiome Explorer/MicrobiomeExplorer/MicrobiomeExplorer')
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
summary(iris)
summary(iris3)
View(data)
data()
summary(volcano)
View(volcano)
summary()
summary(cars)
plot(pressure)
summary(pressure)
plot(cars)
plot(USArrests)
shiny::runApp('C:/Users/Ariel/Desktop/tobedeleted2')
data()
faithful
faithful.head
faithful.head()
faithful.top
head(faithful)
head(faithful[,2])
head(faithful[,1])
head(faithful[,0])
count(faithfuk)
count(faithful)
summary(faithful)
library('plyr')
count(faithful)
nrow(faithful)
min(faithful[,2])
max(faithful[,2])
seq(min(faithful[,2]), max(faithful[,2]))
seq(min(faithful[,2]), max(faithful[,2]), length.out = 25)
seq(min(faithful[,2]), max(faithful[,2]), length.out = 2)
seq(min(faithful[,2]), max(faithful[,2]), length.out = 1)
seq(min(faithful[,2]), max(faithful[,2]), length.out = 100)
seq(min(faithful[,2]), max(faithful[,2]), length.out = 300)
shiny::runApp('C:/Users/Ariel/Desktop/testingshiny')
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
print(emp.data)
View(emp.data)
emp.data[0]
emp.data[1]
emp.data[1;]
emp.data[1:]
emp.data[,1]
emp.data[,2]
emp.data[1:,]
emp.data[1:2,]
emp.data[1:1,]
emp.data[1:1]
emp.data[1,]
emp.data[1,2]
emp.data[1,3]
emp.data[0,3]
emp.data[1,3]
emp.data[1,2]
emp.data[1,2] = 'nancy'
emp.data[1,] = 'nancy'
emp.data[1,]
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
print(emp.data)
#Refrencing data in the dataset:
#Selecting a row:
emp.data[1,] #select the first row
emp.data[1] #select the first column
emp.data[1,2] #select the first row followed by the value in the second column
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
print(emp.data)
#Refrencing data in the dataset:
#Selecting a row:
emp.data[1,] #select the first row
emp.data[1] #select the first column
emp.data[1,2] #select the first row followed by the value in the second column
emp.data[1,2] = 'nancy drew'
print(emp.data)
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
print(emp.data)
#Refrencing data in the dataset:
#Selecting a row:
emp.data[1,] #select the first row
emp.data[1] #select the first column
emp.data[1,2] #select the first row followed by the value in the second column
emp.data[1,2] = 'nancy drew'
print(emp.data)
summary(emp.data)
emp.data$salary
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
print(emp.data)
#Refrencing data in the dataset:
#Selecting a row:
emp.data[1,] #select the first row
emp.data[1] #select the first column
emp.data[1,2] #select the first row followed by the value in the second column
emp.data[1,2] = 'nancy drew'
print(emp.data)
summary(emp.data)
emp.data$salary.sum
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
print(emp.data)
#Refrencing data in the dataset:
#Selecting a row:
emp.data[1,] #select the first row
emp.data[1] #select the first column
emp.data[1,2] #select the first row followed by the value in the second column
emp.data[1,2] = 'nancy drew'
print(emp.data)
summary(emp.data)
sum(emp.data$salary)
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
print(emp.data)
#Refrencing data in the dataset:
#Selecting a row:
emp.data[1,] #select the first row
emp.data[1] #select the first column
emp.data[1,2] #select the first row followed by the value in the second column
emp.data[1,2] = 'nancy drew'
print(emp.data)
summary(emp.data)
average(emp.data$salary)
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
print(emp.data)
#Refrencing data in the dataset:
#Selecting a row:
emp.data[1,] #select the first row
emp.data[1] #select the first column
emp.data[1,2] #select the first row followed by the value in the second column
emp.data[1,2] = 'nancy drew'
print(emp.data)
summary(emp.data)
avg(emp.data$salary)
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
print(emp.data)
#Refrencing data in the dataset:
#Selecting a row:
emp.data[1,] #select the first row
emp.data[1] #select the first column
emp.data[1,2] #select the first row followed by the value in the second column
emp.data[1,2] = 'nancy drew'
print(emp.data)
summary(emp.data)
mean(emp.data$salary)
music = c(210, 194, 170, 110, 190, 406, 730, 290)
musci
music
dim(music) = c(2, 2, 2)
music
music = c(210, 194, 170, 110, 190, 406, 730, 290)
dim(music) = c(2, 2, 2)
dimnames(music) = list(Age = c("Old", "Young"),
Education = c("High", "Low"),
Listen = c("Classical", "Other"))
music
music = c(210, 194, 170, 110, 190, 406, 730, 290)
dim(music) = c(2, 2, 2)
dimnames(music) = list(Age = c("Old", "Young"),
Education = c("High", "Low"),
Listen = c("Classical", "Other"))
mosaicplot(music)
music = c(210, 194, 170, 110, 190, 406, 730, 290)
dim(music) = c(2, 2, 2)
dimnames(music) = list(Age = c("Old", "Young"),
Education = c("High", "Low"),
Listen = c("Classical", "Other"))
mosaicplot(music)
mosaicplot(music, col = c(hcl(240),hcl(120)), main = "Classical music")
knitr::opts_chunk$set(echo = TRUE)
counties <- readRDS("C:\Users\Ariel\Desktop\census_example_reactive\data\counties.rds")
counties <- readRDS("C:\\Users\\Ariel\\Desktop\\census_example_reactive\\data\\counties.rds")
head(counties)
counties <- readRDS("C:\\Users\\Ariel\\Desktop\\census_example_reactive\\data\\counties.rds")
head(counties)
summary(counties)
summary(counties)
counties <- readRDS('C:\\Users\\Ariel\\Desktop\\census_example_reactive\\data\\counties.rds')
head(counties)
summary(counties)
install.packages(c("maps", "mapproj"))
library(maps)
library(mapproj)
source('C:\\Users\\Ariel\\Desktop\\census_example_reactive\\data\\counties.rds')
source("C:\\Users\\Ariel\\Desktop\\census_example_reactive\\helpers.r")
percent_map(counties$white, "darkgreen", "% White")
source("C:\\Users\\Ariel\\Desktop\\census_example_reactive\\helpers.r")
install.packages(c("maps", "mapproj"))
percent_map(counties$white, "darkgreen", "% White")
library(maps)
library(mapproj)
percent_map(counties$white, "darkgreen", "% White")
install.packages(c("maps", "mapproj"))
#install.packages(c("maps", "mapproj"))
library(maps)
library(mapproj)
counties <- readRDS('C:\\Users\\Ariel\\Desktop\\census_example_reactive\\data\\counties.rds')
percent_map(counties$white, "darkgreen", "% White")
data()
knitr::opts_chunk$set(echo = TRUE)
stocks <- data("EuStockMarkets")
head(stocks)
stocks <- data(EuStockMarkets)
head(stocks)
stocks <- EuStockMarkets
head(stocks)
View(stocks)
summary(stocks)
sizeof(stocks)
sizeOf(stocks)
sizeOf(stocks)
sizeOf(stocks)
length(stocks)
stocks$DAX
stocks
typeof(stocks)
data.frame(stocks)
stocks <- data.frame(stocks)
typeof(stocks)
stocks$DAX
source('C:/Users/Ariel/Desktop/census_example_reactive/helpers.r')
shiny::runApp('C:/Users/Ariel/Desktop/census_example_reactive')
colnames(stocks)
runApp('C:/Users/Ariel/Desktop/census_example_reactive')
runApp('C:/Users/Ariel/Desktop/census_example_reactive')
plot(counties)
runApp('C:/Users/Ariel/Desktop/census_example_reactive')
source(helpers.r)
source('helpers.r')
source("C:\\Users\\Ariel\\Desktop\\census_example_reactive\\helpers.R")
library(maps)
library(mapproj)
percent_map(counties$white, "darkgreen", "% White")
runApp('C:/Users/Ariel/Desktop/census_example_reactive')
head(counties)
percent_map(counties$white, "darkgreen", "% White")
runApp('C:/Users/Ariel/Desktop/census_example_reactive')
